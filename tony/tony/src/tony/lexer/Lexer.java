/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.lexer;

import java.io.*;
import java.util.*;
import tony.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TDef(line, pos); }
    Token new1(int line, int pos) { return new TEnd(line, pos); }
    Token new2(int line, int pos) { return new TRef(line, pos); }
    Token new3(int line, int pos) { return new TInt(line, pos); }
    Token new4(int line, int pos) { return new TBool(line, pos); }
    Token new5(int line, int pos) { return new TChar(line, pos); }
    Token new6(int line, int pos) { return new TList(line, pos); }
    Token new7(int line, int pos) { return new TDecl(line, pos); }
    Token new8(int line, int pos) { return new TExit(line, pos); }
    Token new9(int line, int pos) { return new TReturn(line, pos); }
    Token new10(int line, int pos) { return new TIf(line, pos); }
    Token new11(int line, int pos) { return new TElsif(line, pos); }
    Token new12(int line, int pos) { return new TElse(line, pos); }
    Token new13(int line, int pos) { return new TFor(line, pos); }
    Token new14(int line, int pos) { return new TSkip(line, pos); }
    Token new15(int line, int pos) { return new TMod(line, pos); }
    Token new16(int line, int pos) { return new TTrue(line, pos); }
    Token new17(int line, int pos) { return new TFalse(line, pos); }
    Token new18(int line, int pos) { return new TNot(line, pos); }
    Token new19(int line, int pos) { return new TAnd(line, pos); }
    Token new20(int line, int pos) { return new TOr(line, pos); }
    Token new21(int line, int pos) { return new TNew(line, pos); }
    Token new22(int line, int pos) { return new TNil(line, pos); }
    Token new23(int line, int pos) { return new TNilquestionmark(line, pos); }
    Token new24(int line, int pos) { return new THead(line, pos); }
    Token new25(int line, int pos) { return new TTail(line, pos); }
    Token new26(int line, int pos) { return new TPlus(line, pos); }
    Token new27(int line, int pos) { return new TMinus(line, pos); }
    Token new28(int line, int pos) { return new TMul(line, pos); }
    Token new29(int line, int pos) { return new TDiv(line, pos); }
    Token new30(int line, int pos) { return new THash(line, pos); }
    Token new31(int line, int pos) { return new TEq(line, pos); }
    Token new32(int line, int pos) { return new TNoteq(line, pos); }
    Token new33(int line, int pos) { return new TLess(line, pos); }
    Token new34(int line, int pos) { return new TGreater(line, pos); }
    Token new35(int line, int pos) { return new TLesseq(line, pos); }
    Token new36(int line, int pos) { return new TGreatereq(line, pos); }
    Token new37(int line, int pos) { return new TLPar(line, pos); }
    Token new38(int line, int pos) { return new TRPar(line, pos); }
    Token new39(int line, int pos) { return new TLBr(line, pos); }
    Token new40(int line, int pos) { return new TRBr(line, pos); }
    Token new41(int line, int pos) { return new TComma(line, pos); }
    Token new42(int line, int pos) { return new TSemicolon(line, pos); }
    Token new43(int line, int pos) { return new TColon(line, pos); }
    Token new44(int line, int pos) { return new TAssign(line, pos); }
    Token new45(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TConstchar(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TOnelinecomment(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TMultiplelinescomment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {35, 35, 6}, {37, 37, 7}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {47, 47, 15}, {48, 57, 16}, {58, 58, 17}, {59, 59, 18}, {60, 60, 19}, {61, 61, 20}, {62, 62, 21}, {65, 90, 22}, {91, 91, 23}, {93, 93, 24}, {97, 97, 25}, {98, 98, 26}, {99, 99, 27}, {100, 100, 28}, {101, 101, 29}, {102, 102, 30}, {103, 103, 31}, {104, 104, 32}, {105, 105, 33}, {106, 107, 31}, {108, 108, 34}, {109, 109, 35}, {110, 110, 36}, {111, 111, 37}, {112, 113, 31}, {114, 114, 38}, {115, 115, 39}, {116, 116, 40}, {117, 122, 31}, },
            {},
            {},
            {},
            {},
            {{32, 33, 41}, {34, 34, 42}, {35, 38, 41}, {40, 91, 41}, {92, 92, 43}, {93, 126, 41}, },
            {},
            {{0, 9, 44}, {10, 10, 45}, {11, 12, 44}, {13, 13, 46}, {14, 127, 44}, },
            {{32, 33, 47}, {35, 38, 47}, {40, 91, 47}, {92, 92, 48}, {93, 126, 47}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 16}, },
            {{61, 61, 49}, },
            {},
            {{42, 42, 50}, {61, 61, 51}, {62, 62, 52}, },
            {},
            {{61, 61, 53}, },
            {{48, 57, 54}, {63, 63, 55}, {65, 90, 56}, {95, 95, 57}, {97, 122, 58}, },
            {},
            {},
            {{48, 95, -24}, {97, 109, 58}, {110, 110, 59}, {111, 122, 58}, },
            {{48, 95, -24}, {97, 110, 58}, {111, 111, 60}, {112, 122, 58}, },
            {{48, 95, -24}, {97, 103, 58}, {104, 104, 61}, {105, 122, 58}, },
            {{48, 95, -24}, {97, 100, 58}, {101, 101, 62}, {102, 122, 58}, },
            {{48, 95, -24}, {97, 107, 58}, {108, 108, 63}, {109, 109, 58}, {110, 110, 64}, {111, 119, 58}, {120, 120, 65}, {121, 122, 58}, },
            {{48, 95, -24}, {97, 97, 66}, {98, 110, 58}, {111, 111, 67}, {112, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 100, -30}, {101, 101, 68}, {102, 122, 58}, },
            {{48, 95, -24}, {97, 101, 58}, {102, 102, 69}, {103, 109, 58}, {110, 110, 70}, {111, 122, 58}, },
            {{48, 95, -24}, {97, 104, 58}, {105, 105, 71}, {106, 122, 58}, },
            {{48, 110, -28}, {111, 111, 72}, {112, 122, 58}, },
            {{48, 100, -30}, {101, 101, 73}, {102, 104, 58}, {105, 105, 74}, {106, 110, 58}, {111, 111, 75}, {112, 122, 58}, },
            {{48, 95, -24}, {97, 113, 58}, {114, 114, 76}, {115, 122, 58}, },
            {{48, 100, -30}, {101, 101, 77}, {102, 122, 58}, },
            {{48, 95, -24}, {97, 106, 58}, {107, 107, 78}, {108, 122, 58}, },
            {{48, 95, -24}, {97, 97, 79}, {98, 113, 58}, {114, 114, 80}, {115, 122, 58}, },
            {{32, 126, -7}, },
            {},
            {{34, 34, 81}, {39, 39, 82}, {48, 48, 83}, {92, 92, 84}, {110, 110, 85}, {114, 114, 86}, {116, 116, 87}, {120, 120, 88}, },
            {{0, 127, -9}, },
            {},
            {{10, 10, 89}, },
            {{39, 39, 90}, },
            {{34, 34, 91}, {39, 39, 92}, {48, 48, 93}, {92, 92, 94}, {110, 110, 95}, {114, 114, 96}, {116, 116, 97}, {120, 120, 98}, },
            {},
            {{0, 41, 99}, {42, 42, 100}, {43, 127, 99}, },
            {},
            {},
            {},
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 99, 58}, {100, 100, 101}, {101, 122, 58}, },
            {{48, 110, -28}, {111, 111, 102}, {112, 122, 58}, },
            {{48, 95, -24}, {97, 97, 103}, {98, 122, 58}, },
            {{48, 95, -24}, {97, 98, 58}, {99, 99, 104}, {100, 101, 58}, {102, 102, 105}, {103, 122, 58}, },
            {{48, 95, -24}, {97, 114, 58}, {115, 115, 106}, {116, 122, 58}, },
            {{48, 99, -61}, {100, 100, 107}, {101, 122, 58}, },
            {{48, 104, -36}, {105, 105, 108}, {106, 122, 58}, },
            {{48, 107, -31}, {108, 108, 109}, {109, 122, 58}, },
            {{48, 113, -39}, {114, 114, 110}, {115, 122, 58}, },
            {{48, 95, -24}, {97, 97, 111}, {98, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 95, -24}, {97, 115, 58}, {116, 116, 112}, {117, 122, 58}, },
            {{48, 114, -65}, {115, 115, 113}, {116, 122, 58}, },
            {{48, 99, -61}, {100, 100, 114}, {101, 122, 58}, },
            {{48, 95, -24}, {97, 118, 58}, {119, 119, 115}, {120, 122, 58}, },
            {{48, 107, -31}, {108, 108, 116}, {109, 122, 58}, },
            {{48, 115, -72}, {116, 116, 117}, {117, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 101, -35}, {102, 102, 118}, {103, 115, 58}, {116, 116, 119}, {117, 122, 58}, },
            {{48, 104, -36}, {105, 105, 120}, {106, 122, 58}, },
            {{48, 104, -36}, {105, 105, 121}, {106, 122, 58}, },
            {{48, 95, -24}, {97, 116, 58}, {117, 117, 122}, {118, 122, 58}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{48, 57, 123}, {65, 70, 124}, {97, 102, 125}, },
            {},
            {},
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{48, 57, 126}, {65, 70, 127}, {97, 102, 128}, },
            {{0, 127, -52}, },
            {{0, 42, -52}, {43, 61, 99}, {62, 62, 129}, {63, 127, 99}, },
            {{48, 122, -24}, },
            {{48, 107, -31}, {108, 108, 130}, {109, 122, 58}, },
            {{48, 113, -39}, {114, 114, 131}, {115, 122, 58}, },
            {{48, 107, -31}, {108, 108, 132}, {109, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 100, -30}, {101, 101, 133}, {102, 104, 58}, {105, 105, 134}, {106, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 115, -72}, {116, 116, 135}, {117, 122, 58}, },
            {{48, 114, -65}, {115, 115, 136}, {116, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 99, -61}, {100, 100, 137}, {101, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 115, -72}, {116, 116, 138}, {117, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 57, 54}, {63, 63, 139}, {65, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 116, -82}, {117, 117, 140}, {118, 122, 58}, },
            {{48, 95, -24}, {97, 111, 58}, {112, 112, 141}, {113, 122, 58}, },
            {{48, 107, -31}, {108, 108, 142}, {109, 122, 58}, },
            {{48, 100, -30}, {101, 101, 143}, {102, 122, 58}, },
            {{48, 57, 144}, {65, 70, 145}, {97, 102, 146}, },
            {{48, 102, -125}, },
            {{48, 102, -125}, },
            {{48, 57, 147}, {65, 70, 148}, {97, 102, 149}, },
            {{48, 102, -128}, },
            {{48, 102, -128}, },
            {{0, 127, -52}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 101, -35}, {102, 102, 150}, {103, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 100, -30}, {101, 101, 151}, {102, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 113, -39}, {114, 114, 152}, {115, 122, 58}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{32, 126, -7}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{39, 39, 90}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 109, -27}, {110, 110, 153}, {111, 122, 58}, },
            {{48, 122, -24}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 49, 49, 49, 49, -1, 30, -1, -1, 37, 38, 28, 26, 41, 27, 29, 46, 43, 42, 33, 31, 34, 45, 39, 40, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, 48, -1, -1, 50, 50, -1, -1, 44, -1, 35, 32, 36, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 45, 45, 45, 45, 20, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, 50, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 45, 45, 45, 0, 45, 1, 45, 45, 13, 45, 3, 45, 15, 21, 22, 18, 2, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, 51, 4, 5, 7, 12, 45, 8, 45, 24, 6, 23, 45, 14, 25, 16, -1, -1, -1, -1, -1, -1, 11, 17, 45, 9, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
