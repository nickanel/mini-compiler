/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import java.util.*;
import tony.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAFuncDef(AFuncDef node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultCase(node);
    }

    public void caseAVariableDefFunction(AVariableDefFunction node)
    {
        defaultCase(node);
    }

    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    public void caseAFormals(AFormals node)
    {
        defaultCase(node);
    }

    public void caseASemicolonFormal(ASemicolonFormal node)
    {
        defaultCase(node);
    }

    public void caseAFormal(AFormal node)
    {
        defaultCase(node);
    }

    public void caseACommaId(ACommaId node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    public void caseACharType(ACharType node)
    {
        defaultCase(node);
    }

    public void caseATypeType(ATypeType node)
    {
        defaultCase(node);
    }

    public void caseAListType(AListType node)
    {
        defaultCase(node);
    }

    public void caseAFuncDecl(AFuncDecl node)
    {
        defaultCase(node);
    }

    public void caseAVarDef(AVarDef node)
    {
        defaultCase(node);
    }

    public void caseASimpleStmt(ASimpleStmt node)
    {
        defaultCase(node);
    }

    public void caseAExitStmt(AExitStmt node)
    {
        defaultCase(node);
    }

    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    public void caseAForStmt(AForStmt node)
    {
        defaultCase(node);
    }

    public void caseAElseifStmt(AElseifStmt node)
    {
        defaultCase(node);
    }

    public void caseAElseStmt(AElseStmt node)
    {
        defaultCase(node);
    }

    public void caseASkipSimple(ASkipSimple node)
    {
        defaultCase(node);
    }

    public void caseAAtomSimple(AAtomSimple node)
    {
        defaultCase(node);
    }

    public void caseACallSimple(ACallSimple node)
    {
        defaultCase(node);
    }

    public void caseASimpleList(ASimpleList node)
    {
        defaultCase(node);
    }

    public void caseACommaSimple(ACommaSimple node)
    {
        defaultCase(node);
    }

    public void caseACall(ACall node)
    {
        defaultCase(node);
    }

    public void caseAExprs(AExprs node)
    {
        defaultCase(node);
    }

    public void caseACommaExpr(ACommaExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdAtom(AIdAtom node)
    {
        defaultCase(node);
    }

    public void caseAStringAtom(AStringAtom node)
    {
        defaultCase(node);
    }

    public void caseAAtomAtom(AAtomAtom node)
    {
        defaultCase(node);
    }

    public void caseACallAtom(ACallAtom node)
    {
        defaultCase(node);
    }

    public void caseAAndexpressionExpr(AAndexpressionExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    public void caseANotexpressionAndexpression(ANotexpressionAndexpression node)
    {
        defaultCase(node);
    }

    public void caseAAndAndexpression(AAndAndexpression node)
    {
        defaultCase(node);
    }

    public void caseAComparisonexpressionNotexpression(AComparisonexpressionNotexpression node)
    {
        defaultCase(node);
    }

    public void caseANotNotexpression(ANotNotexpression node)
    {
        defaultCase(node);
    }

    public void caseAHashexpressionComparisonexpression(AHashexpressionComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseAEqualComparisonexpression(AEqualComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseANotequalComparisonexpression(ANotequalComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseALessComparisonexpression(ALessComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseAGreaterComparisonexpression(AGreaterComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseALessequalComparisonexpression(ALessequalComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseAGreaterequalComparisonexpression(AGreaterequalComparisonexpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionexpressionHashexpression(AAdditionexpressionHashexpression node)
    {
        defaultCase(node);
    }

    public void caseAHashHashexpression(AHashHashexpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationAdditionexpression(AMultiplicationAdditionexpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionAdditionexpression(AAdditionAdditionexpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionAdditionexpression(ASubtractionAdditionexpression node)
    {
        defaultCase(node);
    }

    public void caseASignexpressionMultiplication(ASignexpressionMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultCase(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        defaultCase(node);
    }

    public void caseASomethingSignexpression(ASomethingSignexpression node)
    {
        defaultCase(node);
    }

    public void caseAPositiveSignexpression(APositiveSignexpression node)
    {
        defaultCase(node);
    }

    public void caseANegativeSignexpression(ANegativeSignexpression node)
    {
        defaultCase(node);
    }

    public void caseAAtomSomething(AAtomSomething node)
    {
        defaultCase(node);
    }

    public void caseAConstintSomething(AConstintSomething node)
    {
        defaultCase(node);
    }

    public void caseAConstcharSomething(AConstcharSomething node)
    {
        defaultCase(node);
    }

    public void caseAExprSomething(AExprSomething node)
    {
        defaultCase(node);
    }

    public void caseANewSomething(ANewSomething node)
    {
        defaultCase(node);
    }

    public void caseANilSomething(ANilSomething node)
    {
        defaultCase(node);
    }

    public void caseANilquestSomething(ANilquestSomething node)
    {
        defaultCase(node);
    }

    public void caseAHeadSomething(AHeadSomething node)
    {
        defaultCase(node);
    }

    public void caseATailSomething(ATailSomething node)
    {
        defaultCase(node);
    }

    public void caseATrueSomething(ATrueSomething node)
    {
        defaultCase(node);
    }

    public void caseAFalseSomething(AFalseSomething node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTRef(TRef node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    public void caseTDecl(TDecl node)
    {
        defaultCase(node);
    }

    public void caseTExit(TExit node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElsif(TElsif node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTSkip(TSkip node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTNil(TNil node)
    {
        defaultCase(node);
    }

    public void caseTNilquestionmark(TNilquestionmark node)
    {
        defaultCase(node);
    }

    public void caseTHead(THead node)
    {
        defaultCase(node);
    }

    public void caseTTail(TTail node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    public void caseTLesseq(TLesseq node)
    {
        defaultCase(node);
    }

    public void caseTGreatereq(TGreatereq node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTConstchar(TConstchar node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTOnelinecomment(TOnelinecomment node)
    {
        defaultCase(node);
    }

    public void caseTMultiplelinescomment(TMultiplelinescomment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
