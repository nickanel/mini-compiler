/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import tony.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            Object temp[] = node.getStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getFunction().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFunction) temp[i]).apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionDefFunction(AFunctionDefFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDefFunction(AFunctionDefFunction node)
    {
        inAFunctionDefFunction(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFunctionDefFunction(node);
    }

    public void inAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclFunction(AFunctionDeclFunction node)
    {
        inAFunctionDeclFunction(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFunctionDeclFunction(node);
    }

    public void inAVariableDefFunction(AVariableDefFunction node)
    {
        defaultIn(node);
    }

    public void outAVariableDefFunction(AVariableDefFunction node)
    {
        defaultOut(node);
    }

    public void caseAVariableDefFunction(AVariableDefFunction node)
    {
        inAVariableDefFunction(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVariableDefFunction(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAHeader(node);
    }

    public void inAFormals(AFormals node)
    {
        defaultIn(node);
    }

    public void outAFormals(AFormals node)
    {
        defaultOut(node);
    }

    public void caseAFormals(AFormals node)
    {
        inAFormals(node);
        {
            Object temp[] = node.getSemicolonFormal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PSemicolonFormal) temp[i]).apply(this);
            }
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAFormals(node);
    }

    public void inASemicolonFormal(ASemicolonFormal node)
    {
        defaultIn(node);
    }

    public void outASemicolonFormal(ASemicolonFormal node)
    {
        defaultOut(node);
    }

    public void caseASemicolonFormal(ASemicolonFormal node)
    {
        inASemicolonFormal(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonFormal(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        {
            Object temp[] = node.getCommaId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaId) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outAFormal(node);
    }

    public void inACommaId(ACommaId node)
    {
        defaultIn(node);
    }

    public void outACommaId(ACommaId node)
    {
        defaultOut(node);
    }

    public void caseACommaId(ACommaId node)
    {
        inACommaId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaId(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharType(node);
    }

    public void inATypeType(ATypeType node)
    {
        defaultIn(node);
    }

    public void outATypeType(ATypeType node)
    {
        defaultOut(node);
    }

    public void caseATypeType(ATypeType node)
    {
        inATypeType(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeType(node);
    }

    public void inAListType(AListType node)
    {
        defaultIn(node);
    }

    public void outAListType(AListType node)
    {
        defaultOut(node);
    }

    public void caseAListType(AListType node)
    {
        inAListType(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListType(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        {
            Object temp[] = node.getCommaId().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaId) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVarDef(node);
    }

    public void inASimpleStmt(ASimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimpleStmt(ASimpleStmt node)
    {
        defaultOut(node);
    }

    public void caseASimpleStmt(ASimpleStmt node)
    {
        inASimpleStmt(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outASimpleStmt(node);
    }

    public void inAExitStmt(AExitStmt node)
    {
        defaultIn(node);
    }

    public void outAExitStmt(AExitStmt node)
    {
        defaultOut(node);
    }

    public void caseAExitStmt(AExitStmt node)
    {
        inAExitStmt(node);
        if(node.getExit() != null)
        {
            node.getExit().apply(this);
        }
        outAExitStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        {
            Object temp[] = node.getElseifStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PElseifStmt) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            Object temp[] = node.getStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStmt(node);
    }

    public void inAElseifStmt(AElseifStmt node)
    {
        defaultIn(node);
    }

    public void outAElseifStmt(AElseifStmt node)
    {
        defaultOut(node);
    }

    public void caseAElseifStmt(AElseifStmt node)
    {
        inAElseifStmt(node);
        {
            Object temp[] = node.getStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getElsif() != null)
        {
            node.getElsif().apply(this);
        }
        outAElseifStmt(node);
    }

    public void inAElseStmt(AElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmt(AElseStmt node)
    {
        defaultOut(node);
    }

    public void caseAElseStmt(AElseStmt node)
    {
        inAElseStmt(node);
        {
            Object temp[] = node.getStmt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseStmt(node);
    }

    public void inASkipSimple(ASkipSimple node)
    {
        defaultIn(node);
    }

    public void outASkipSimple(ASkipSimple node)
    {
        defaultOut(node);
    }

    public void caseASkipSimple(ASkipSimple node)
    {
        inASkipSimple(node);
        if(node.getSkip() != null)
        {
            node.getSkip().apply(this);
        }
        outASkipSimple(node);
    }

    public void inAAtomSimple(AAtomSimple node)
    {
        defaultIn(node);
    }

    public void outAAtomSimple(AAtomSimple node)
    {
        defaultOut(node);
    }

    public void caseAAtomSimple(AAtomSimple node)
    {
        inAAtomSimple(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomSimple(node);
    }

    public void inACallSimple(ACallSimple node)
    {
        defaultIn(node);
    }

    public void outACallSimple(ACallSimple node)
    {
        defaultOut(node);
    }

    public void caseACallSimple(ACallSimple node)
    {
        inACallSimple(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallSimple(node);
    }

    public void inASimpleList(ASimpleList node)
    {
        defaultIn(node);
    }

    public void outASimpleList(ASimpleList node)
    {
        defaultOut(node);
    }

    public void caseASimpleList(ASimpleList node)
    {
        inASimpleList(node);
        {
            Object temp[] = node.getCommaSimple().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaSimple) temp[i]).apply(this);
            }
        }
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outASimpleList(node);
    }

    public void inACommaSimple(ACommaSimple node)
    {
        defaultIn(node);
    }

    public void outACommaSimple(ACommaSimple node)
    {
        defaultOut(node);
    }

    public void caseACommaSimple(ACommaSimple node)
    {
        inACommaSimple(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaSimple(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExprs() != null)
        {
            node.getExprs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACall(node);
    }

    public void inAExprs(AExprs node)
    {
        defaultIn(node);
    }

    public void outAExprs(AExprs node)
    {
        defaultOut(node);
    }

    public void caseAExprs(AExprs node)
    {
        inAExprs(node);
        {
            Object temp[] = node.getCommaExpr().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpr) temp[i]).apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprs(node);
    }

    public void inACommaExpr(ACommaExpr node)
    {
        defaultIn(node);
    }

    public void outACommaExpr(ACommaExpr node)
    {
        defaultOut(node);
    }

    public void caseACommaExpr(ACommaExpr node)
    {
        inACommaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaExpr(node);
    }

    public void inAIdAtom(AIdAtom node)
    {
        defaultIn(node);
    }

    public void outAIdAtom(AIdAtom node)
    {
        defaultOut(node);
    }

    public void caseAIdAtom(AIdAtom node)
    {
        inAIdAtom(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtom(node);
    }

    public void inAStringAtom(AStringAtom node)
    {
        defaultIn(node);
    }

    public void outAStringAtom(AStringAtom node)
    {
        defaultOut(node);
    }

    public void caseAStringAtom(AStringAtom node)
    {
        inAStringAtom(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringAtom(node);
    }

    public void inAAtomAtom(AAtomAtom node)
    {
        defaultIn(node);
    }

    public void outAAtomAtom(AAtomAtom node)
    {
        defaultOut(node);
    }

    public void caseAAtomAtom(AAtomAtom node)
    {
        inAAtomAtom(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomAtom(node);
    }

    public void inACallAtom(ACallAtom node)
    {
        defaultIn(node);
    }

    public void outACallAtom(ACallAtom node)
    {
        defaultOut(node);
    }

    public void caseACallAtom(ACallAtom node)
    {
        inACallAtom(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallAtom(node);
    }

    public void inAAndexpressionExpr(AAndexpressionExpr node)
    {
        defaultIn(node);
    }

    public void outAAndexpressionExpr(AAndexpressionExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndexpressionExpr(AAndexpressionExpr node)
    {
        inAAndexpressionExpr(node);
        if(node.getAndexpression() != null)
        {
            node.getAndexpression().apply(this);
        }
        outAAndexpressionExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getAndexpression() != null)
        {
            node.getAndexpression().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOrExpr(node);
    }

    public void inANotexpressionAndexpression(ANotexpressionAndexpression node)
    {
        defaultIn(node);
    }

    public void outANotexpressionAndexpression(ANotexpressionAndexpression node)
    {
        defaultOut(node);
    }

    public void caseANotexpressionAndexpression(ANotexpressionAndexpression node)
    {
        inANotexpressionAndexpression(node);
        if(node.getNotexpression() != null)
        {
            node.getNotexpression().apply(this);
        }
        outANotexpressionAndexpression(node);
    }

    public void inAAndAndexpression(AAndAndexpression node)
    {
        defaultIn(node);
    }

    public void outAAndAndexpression(AAndAndexpression node)
    {
        defaultOut(node);
    }

    public void caseAAndAndexpression(AAndAndexpression node)
    {
        inAAndAndexpression(node);
        if(node.getNotexpression() != null)
        {
            node.getNotexpression().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getAndexpression() != null)
        {
            node.getAndexpression().apply(this);
        }
        outAAndAndexpression(node);
    }

    public void inAComparisonexpressionNotexpression(AComparisonexpressionNotexpression node)
    {
        defaultIn(node);
    }

    public void outAComparisonexpressionNotexpression(AComparisonexpressionNotexpression node)
    {
        defaultOut(node);
    }

    public void caseAComparisonexpressionNotexpression(AComparisonexpressionNotexpression node)
    {
        inAComparisonexpressionNotexpression(node);
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outAComparisonexpressionNotexpression(node);
    }

    public void inANotNotexpression(ANotNotexpression node)
    {
        defaultIn(node);
    }

    public void outANotNotexpression(ANotNotexpression node)
    {
        defaultOut(node);
    }

    public void caseANotNotexpression(ANotNotexpression node)
    {
        inANotNotexpression(node);
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotNotexpression(node);
    }

    public void inAHashexpressionComparisonexpression(AHashexpressionComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outAHashexpressionComparisonexpression(AHashexpressionComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseAHashexpressionComparisonexpression(AHashexpressionComparisonexpression node)
    {
        inAHashexpressionComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        outAHashexpressionComparisonexpression(node);
    }

    public void inAEqualComparisonexpression(AEqualComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outAEqualComparisonexpression(AEqualComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseAEqualComparisonexpression(AEqualComparisonexpression node)
    {
        inAEqualComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outAEqualComparisonexpression(node);
    }

    public void inANotequalComparisonexpression(ANotequalComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outANotequalComparisonexpression(ANotequalComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseANotequalComparisonexpression(ANotequalComparisonexpression node)
    {
        inANotequalComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outANotequalComparisonexpression(node);
    }

    public void inALessComparisonexpression(ALessComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outALessComparisonexpression(ALessComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseALessComparisonexpression(ALessComparisonexpression node)
    {
        inALessComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outALessComparisonexpression(node);
    }

    public void inAGreaterComparisonexpression(AGreaterComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterComparisonexpression(AGreaterComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseAGreaterComparisonexpression(AGreaterComparisonexpression node)
    {
        inAGreaterComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outAGreaterComparisonexpression(node);
    }

    public void inALessequalComparisonexpression(ALessequalComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outALessequalComparisonexpression(ALessequalComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseALessequalComparisonexpression(ALessequalComparisonexpression node)
    {
        inALessequalComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getLesseq() != null)
        {
            node.getLesseq().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outALessequalComparisonexpression(node);
    }

    public void inAGreaterequalComparisonexpression(AGreaterequalComparisonexpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterequalComparisonexpression(AGreaterequalComparisonexpression node)
    {
        defaultOut(node);
    }

    public void caseAGreaterequalComparisonexpression(AGreaterequalComparisonexpression node)
    {
        inAGreaterequalComparisonexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getGreatereq() != null)
        {
            node.getGreatereq().apply(this);
        }
        if(node.getComparisonexpression() != null)
        {
            node.getComparisonexpression().apply(this);
        }
        outAGreaterequalComparisonexpression(node);
    }

    public void inAAdditionexpressionHashexpression(AAdditionexpressionHashexpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionexpressionHashexpression(AAdditionexpressionHashexpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionexpressionHashexpression(AAdditionexpressionHashexpression node)
    {
        inAAdditionexpressionHashexpression(node);
        if(node.getAdditionexpression() != null)
        {
            node.getAdditionexpression().apply(this);
        }
        outAAdditionexpressionHashexpression(node);
    }

    public void inAHashHashexpression(AHashHashexpression node)
    {
        defaultIn(node);
    }

    public void outAHashHashexpression(AHashHashexpression node)
    {
        defaultOut(node);
    }

    public void caseAHashHashexpression(AHashHashexpression node)
    {
        inAHashHashexpression(node);
        if(node.getHashexpression() != null)
        {
            node.getHashexpression().apply(this);
        }
        if(node.getHash() != null)
        {
            node.getHash().apply(this);
        }
        if(node.getAdditionexpression() != null)
        {
            node.getAdditionexpression().apply(this);
        }
        outAHashHashexpression(node);
    }

    public void inAMultiplicationAdditionexpression(AMultiplicationAdditionexpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationAdditionexpression(AMultiplicationAdditionexpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationAdditionexpression(AMultiplicationAdditionexpression node)
    {
        inAMultiplicationAdditionexpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationAdditionexpression(node);
    }

    public void inAAdditionAdditionexpression(AAdditionAdditionexpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionAdditionexpression(AAdditionAdditionexpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionAdditionexpression(AAdditionAdditionexpression node)
    {
        inAAdditionAdditionexpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getAdditionexpression() != null)
        {
            node.getAdditionexpression().apply(this);
        }
        outAAdditionAdditionexpression(node);
    }

    public void inASubtractionAdditionexpression(ASubtractionAdditionexpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionAdditionexpression(ASubtractionAdditionexpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionAdditionexpression(ASubtractionAdditionexpression node)
    {
        inASubtractionAdditionexpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getAdditionexpression() != null)
        {
            node.getAdditionexpression().apply(this);
        }
        outASubtractionAdditionexpression(node);
    }

    public void inASignexpressionMultiplication(ASignexpressionMultiplication node)
    {
        defaultIn(node);
    }

    public void outASignexpressionMultiplication(ASignexpressionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseASignexpressionMultiplication(ASignexpressionMultiplication node)
    {
        inASignexpressionMultiplication(node);
        if(node.getSignexpression() != null)
        {
            node.getSignexpression().apply(this);
        }
        outASignexpressionMultiplication(node);
    }

    public void inAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        inAMultiplicationMultiplication(node);
        if(node.getSignexpression() != null)
        {
            node.getSignexpression().apply(this);
        }
        if(node.getMul() != null)
        {
            node.getMul().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationMultiplication(node);
    }

    public void inADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        inADivisionMultiplication(node);
        if(node.getSignexpression() != null)
        {
            node.getSignexpression().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outADivisionMultiplication(node);
    }

    public void inAModuloMultiplication(AModuloMultiplication node)
    {
        defaultIn(node);
    }

    public void outAModuloMultiplication(AModuloMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        inAModuloMultiplication(node);
        if(node.getSignexpression() != null)
        {
            node.getSignexpression().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAModuloMultiplication(node);
    }

    public void inASomethingSignexpression(ASomethingSignexpression node)
    {
        defaultIn(node);
    }

    public void outASomethingSignexpression(ASomethingSignexpression node)
    {
        defaultOut(node);
    }

    public void caseASomethingSignexpression(ASomethingSignexpression node)
    {
        inASomethingSignexpression(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        outASomethingSignexpression(node);
    }

    public void inAPositiveSignexpression(APositiveSignexpression node)
    {
        defaultIn(node);
    }

    public void outAPositiveSignexpression(APositiveSignexpression node)
    {
        defaultOut(node);
    }

    public void caseAPositiveSignexpression(APositiveSignexpression node)
    {
        inAPositiveSignexpression(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPositiveSignexpression(node);
    }

    public void inANegativeSignexpression(ANegativeSignexpression node)
    {
        defaultIn(node);
    }

    public void outANegativeSignexpression(ANegativeSignexpression node)
    {
        defaultOut(node);
    }

    public void caseANegativeSignexpression(ANegativeSignexpression node)
    {
        inANegativeSignexpression(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegativeSignexpression(node);
    }

    public void inAAtomSomething(AAtomSomething node)
    {
        defaultIn(node);
    }

    public void outAAtomSomething(AAtomSomething node)
    {
        defaultOut(node);
    }

    public void caseAAtomSomething(AAtomSomething node)
    {
        inAAtomSomething(node);
        if(node.getAtom() != null)
        {
            node.getAtom().apply(this);
        }
        outAAtomSomething(node);
    }

    public void inAConstintSomething(AConstintSomething node)
    {
        defaultIn(node);
    }

    public void outAConstintSomething(AConstintSomething node)
    {
        defaultOut(node);
    }

    public void caseAConstintSomething(AConstintSomething node)
    {
        inAConstintSomething(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAConstintSomething(node);
    }

    public void inAConstcharSomething(AConstcharSomething node)
    {
        defaultIn(node);
    }

    public void outAConstcharSomething(AConstcharSomething node)
    {
        defaultOut(node);
    }

    public void caseAConstcharSomething(AConstcharSomething node)
    {
        inAConstcharSomething(node);
        if(node.getConstchar() != null)
        {
            node.getConstchar().apply(this);
        }
        outAConstcharSomething(node);
    }

    public void inAExprSomething(AExprSomething node)
    {
        defaultIn(node);
    }

    public void outAExprSomething(AExprSomething node)
    {
        defaultOut(node);
    }

    public void caseAExprSomething(AExprSomething node)
    {
        inAExprSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExprSomething(node);
    }

    public void inANewSomething(ANewSomething node)
    {
        defaultIn(node);
    }

    public void outANewSomething(ANewSomething node)
    {
        defaultOut(node);
    }

    public void caseANewSomething(ANewSomething node)
    {
        inANewSomething(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewSomething(node);
    }

    public void inANilSomething(ANilSomething node)
    {
        defaultIn(node);
    }

    public void outANilSomething(ANilSomething node)
    {
        defaultOut(node);
    }

    public void caseANilSomething(ANilSomething node)
    {
        inANilSomething(node);
        if(node.getNil() != null)
        {
            node.getNil().apply(this);
        }
        outANilSomething(node);
    }

    public void inANilquestSomething(ANilquestSomething node)
    {
        defaultIn(node);
    }

    public void outANilquestSomething(ANilquestSomething node)
    {
        defaultOut(node);
    }

    public void caseANilquestSomething(ANilquestSomething node)
    {
        inANilquestSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNilquestionmark() != null)
        {
            node.getNilquestionmark().apply(this);
        }
        outANilquestSomething(node);
    }

    public void inAHeadSomething(AHeadSomething node)
    {
        defaultIn(node);
    }

    public void outAHeadSomething(AHeadSomething node)
    {
        defaultOut(node);
    }

    public void caseAHeadSomething(AHeadSomething node)
    {
        inAHeadSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outAHeadSomething(node);
    }

    public void inATailSomething(ATailSomething node)
    {
        defaultIn(node);
    }

    public void outATailSomething(ATailSomething node)
    {
        defaultOut(node);
    }

    public void caseATailSomething(ATailSomething node)
    {
        inATailSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        outATailSomething(node);
    }

    public void inATrueSomething(ATrueSomething node)
    {
        defaultIn(node);
    }

    public void outATrueSomething(ATrueSomething node)
    {
        defaultOut(node);
    }

    public void caseATrueSomething(ATrueSomething node)
    {
        inATrueSomething(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueSomething(node);
    }

    public void inAFalseSomething(AFalseSomething node)
    {
        defaultIn(node);
    }

    public void outAFalseSomething(AFalseSomething node)
    {
        defaultOut(node);
    }

    public void caseAFalseSomething(AFalseSomething node)
    {
        inAFalseSomething(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseSomething(node);
    }
}
