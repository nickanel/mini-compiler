/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.analysis;

import tony.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFuncDef(AFuncDef node);
    void caseAFunctionDefFunction(AFunctionDefFunction node);
    void caseAFunctionDeclFunction(AFunctionDeclFunction node);
    void caseAVariableDefFunction(AVariableDefFunction node);
    void caseAHeader(AHeader node);
    void caseAFormals(AFormals node);
    void caseASemicolonFormal(ASemicolonFormal node);
    void caseAFormal(AFormal node);
    void caseACommaId(ACommaId node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseACharType(ACharType node);
    void caseATypeType(ATypeType node);
    void caseAListType(AListType node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAVarDef(AVarDef node);
    void caseASimpleStmt(ASimpleStmt node);
    void caseAExitStmt(AExitStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAForStmt(AForStmt node);
    void caseAElseifStmt(AElseifStmt node);
    void caseAElseStmt(AElseStmt node);
    void caseASkipSimple(ASkipSimple node);
    void caseAAtomSimple(AAtomSimple node);
    void caseACallSimple(ACallSimple node);
    void caseASimpleList(ASimpleList node);
    void caseACommaSimple(ACommaSimple node);
    void caseACall(ACall node);
    void caseAExprs(AExprs node);
    void caseACommaExpr(ACommaExpr node);
    void caseAIdAtom(AIdAtom node);
    void caseAStringAtom(AStringAtom node);
    void caseAAtomAtom(AAtomAtom node);
    void caseACallAtom(ACallAtom node);
    void caseAAndexpressionExpr(AAndexpressionExpr node);
    void caseAOrExpr(AOrExpr node);
    void caseANotexpressionAndexpression(ANotexpressionAndexpression node);
    void caseAAndAndexpression(AAndAndexpression node);
    void caseAComparisonexpressionNotexpression(AComparisonexpressionNotexpression node);
    void caseANotNotexpression(ANotNotexpression node);
    void caseAHashexpressionComparisonexpression(AHashexpressionComparisonexpression node);
    void caseAEqualComparisonexpression(AEqualComparisonexpression node);
    void caseANotequalComparisonexpression(ANotequalComparisonexpression node);
    void caseALessComparisonexpression(ALessComparisonexpression node);
    void caseAGreaterComparisonexpression(AGreaterComparisonexpression node);
    void caseALessequalComparisonexpression(ALessequalComparisonexpression node);
    void caseAGreaterequalComparisonexpression(AGreaterequalComparisonexpression node);
    void caseAAdditionexpressionHashexpression(AAdditionexpressionHashexpression node);
    void caseAHashHashexpression(AHashHashexpression node);
    void caseAMultiplicationAdditionexpression(AMultiplicationAdditionexpression node);
    void caseAAdditionAdditionexpression(AAdditionAdditionexpression node);
    void caseASubtractionAdditionexpression(ASubtractionAdditionexpression node);
    void caseASignexpressionMultiplication(ASignexpressionMultiplication node);
    void caseAMultiplicationMultiplication(AMultiplicationMultiplication node);
    void caseADivisionMultiplication(ADivisionMultiplication node);
    void caseAModuloMultiplication(AModuloMultiplication node);
    void caseASomethingSignexpression(ASomethingSignexpression node);
    void caseAPositiveSignexpression(APositiveSignexpression node);
    void caseANegativeSignexpression(ANegativeSignexpression node);
    void caseAAtomSomething(AAtomSomething node);
    void caseAConstintSomething(AConstintSomething node);
    void caseAConstcharSomething(AConstcharSomething node);
    void caseAExprSomething(AExprSomething node);
    void caseANewSomething(ANewSomething node);
    void caseANilSomething(ANilSomething node);
    void caseANilquestSomething(ANilquestSomething node);
    void caseAHeadSomething(AHeadSomething node);
    void caseATailSomething(ATailSomething node);
    void caseATrueSomething(ATrueSomething node);
    void caseAFalseSomething(AFalseSomething node);

    void caseTDef(TDef node);
    void caseTEnd(TEnd node);
    void caseTRef(TRef node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTChar(TChar node);
    void caseTList(TList node);
    void caseTDecl(TDecl node);
    void caseTExit(TExit node);
    void caseTReturn(TReturn node);
    void caseTIf(TIf node);
    void caseTElsif(TElsif node);
    void caseTElse(TElse node);
    void caseTFor(TFor node);
    void caseTSkip(TSkip node);
    void caseTMod(TMod node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNew(TNew node);
    void caseTNil(TNil node);
    void caseTNilquestionmark(TNilquestionmark node);
    void caseTHead(THead node);
    void caseTTail(TTail node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMul(TMul node);
    void caseTDiv(TDiv node);
    void caseTHash(THash node);
    void caseTEq(TEq node);
    void caseTNoteq(TNoteq node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTLesseq(TLesseq node);
    void caseTGreatereq(TGreatereq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTConstchar(TConstchar node);
    void caseTString(TString node);
    void caseTBlank(TBlank node);
    void caseTOnelinecomment(TOnelinecomment node);
    void caseTMultiplelinescomment(TMultiplelinescomment node);
    void caseEOF(EOF node);
}
