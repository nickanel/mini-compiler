/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class ASemicolonFormal extends PSemicolonFormal
{
    private TSemicolon _semicolon_;
    private PFormal _formal_;

    public ASemicolonFormal()
    {
    }

    public ASemicolonFormal(
        TSemicolon _semicolon_,
        PFormal _formal_)
    {
        setSemicolon(_semicolon_);

        setFormal(_formal_);

    }
    public Object clone()
    {
        return new ASemicolonFormal(
            (TSemicolon) cloneNode(_semicolon_),
            (PFormal) cloneNode(_formal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASemicolonFormal(this);
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public PFormal getFormal()
    {
        return _formal_;
    }

    public void setFormal(PFormal node)
    {
        if(_formal_ != null)
        {
            _formal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _formal_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_semicolon_)
            + toString(_formal_);
    }

    void removeChild(Node child)
    {
        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

        if(_formal_ == child)
        {
            _formal_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(_formal_ == oldChild)
        {
            setFormal((PFormal) newChild);
            return;
        }

    }
}
