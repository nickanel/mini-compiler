/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AHashHashexpression extends PHashexpression
{
    private PAdditionexpression _additionexpression_;
    private THash _hash_;
    private PHashexpression _hashexpression_;

    public AHashHashexpression()
    {
    }

    public AHashHashexpression(
        PAdditionexpression _additionexpression_,
        THash _hash_,
        PHashexpression _hashexpression_)
    {
        setAdditionexpression(_additionexpression_);

        setHash(_hash_);

        setHashexpression(_hashexpression_);

    }
    public Object clone()
    {
        return new AHashHashexpression(
            (PAdditionexpression) cloneNode(_additionexpression_),
            (THash) cloneNode(_hash_),
            (PHashexpression) cloneNode(_hashexpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHashHashexpression(this);
    }

    public PAdditionexpression getAdditionexpression()
    {
        return _additionexpression_;
    }

    public void setAdditionexpression(PAdditionexpression node)
    {
        if(_additionexpression_ != null)
        {
            _additionexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _additionexpression_ = node;
    }

    public THash getHash()
    {
        return _hash_;
    }

    public void setHash(THash node)
    {
        if(_hash_ != null)
        {
            _hash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hash_ = node;
    }

    public PHashexpression getHashexpression()
    {
        return _hashexpression_;
    }

    public void setHashexpression(PHashexpression node)
    {
        if(_hashexpression_ != null)
        {
            _hashexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hashexpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_additionexpression_)
            + toString(_hash_)
            + toString(_hashexpression_);
    }

    void removeChild(Node child)
    {
        if(_additionexpression_ == child)
        {
            _additionexpression_ = null;
            return;
        }

        if(_hash_ == child)
        {
            _hash_ = null;
            return;
        }

        if(_hashexpression_ == child)
        {
            _hashexpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_additionexpression_ == oldChild)
        {
            setAdditionexpression((PAdditionexpression) newChild);
            return;
        }

        if(_hash_ == oldChild)
        {
            setHash((THash) newChild);
            return;
        }

        if(_hashexpression_ == oldChild)
        {
            setHashexpression((PHashexpression) newChild);
            return;
        }

    }
}
