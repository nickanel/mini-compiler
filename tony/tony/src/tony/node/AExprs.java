/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AExprs extends PExprs
{
    private PExpr _expr_;
    private final LinkedList _commaExpr_ = new TypedLinkedList(new CommaExpr_Cast());

    public AExprs()
    {
    }

    public AExprs(
        PExpr _expr_,
        List _commaExpr_)
    {
        setExpr(_expr_);

        {
            this._commaExpr_.clear();
            this._commaExpr_.addAll(_commaExpr_);
        }

    }
    public Object clone()
    {
        return new AExprs(
            (PExpr) cloneNode(_expr_),
            cloneList(_commaExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprs(this);
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public LinkedList getCommaExpr()
    {
        return _commaExpr_;
    }

    public void setCommaExpr(List list)
    {
        _commaExpr_.clear();
        _commaExpr_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_expr_)
            + toString(_commaExpr_);
    }

    void removeChild(Node child)
    {
        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_commaExpr_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        for(ListIterator i = _commaExpr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class CommaExpr_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaExpr node = (PCommaExpr) o;

            if((node.parent() != null) &&
                (node.parent() != AExprs.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AExprs.this))
            {
                node.parent(AExprs.this);
            }

            return node;
        }
    }
}
