/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AEqualComparisonexpression extends PComparisonexpression
{
    private PComparisonexpression _comparisonexpression_;
    private TEq _eq_;
    private PHashexpression _hashexpression_;

    public AEqualComparisonexpression()
    {
    }

    public AEqualComparisonexpression(
        PComparisonexpression _comparisonexpression_,
        TEq _eq_,
        PHashexpression _hashexpression_)
    {
        setComparisonexpression(_comparisonexpression_);

        setEq(_eq_);

        setHashexpression(_hashexpression_);

    }
    public Object clone()
    {
        return new AEqualComparisonexpression(
            (PComparisonexpression) cloneNode(_comparisonexpression_),
            (TEq) cloneNode(_eq_),
            (PHashexpression) cloneNode(_hashexpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqualComparisonexpression(this);
    }

    public PComparisonexpression getComparisonexpression()
    {
        return _comparisonexpression_;
    }

    public void setComparisonexpression(PComparisonexpression node)
    {
        if(_comparisonexpression_ != null)
        {
            _comparisonexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparisonexpression_ = node;
    }

    public TEq getEq()
    {
        return _eq_;
    }

    public void setEq(TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _eq_ = node;
    }

    public PHashexpression getHashexpression()
    {
        return _hashexpression_;
    }

    public void setHashexpression(PHashexpression node)
    {
        if(_hashexpression_ != null)
        {
            _hashexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hashexpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comparisonexpression_)
            + toString(_eq_)
            + toString(_hashexpression_);
    }

    void removeChild(Node child)
    {
        if(_comparisonexpression_ == child)
        {
            _comparisonexpression_ = null;
            return;
        }

        if(_eq_ == child)
        {
            _eq_ = null;
            return;
        }

        if(_hashexpression_ == child)
        {
            _hashexpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comparisonexpression_ == oldChild)
        {
            setComparisonexpression((PComparisonexpression) newChild);
            return;
        }

        if(_eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(_hashexpression_ == oldChild)
        {
            setHashexpression((PHashexpression) newChild);
            return;
        }

    }
}
