/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AModuloMultiplication extends PMultiplication
{
    private PMultiplication _multiplication_;
    private TMod _mod_;
    private PSignexpression _signexpression_;

    public AModuloMultiplication()
    {
    }

    public AModuloMultiplication(
        PMultiplication _multiplication_,
        TMod _mod_,
        PSignexpression _signexpression_)
    {
        setMultiplication(_multiplication_);

        setMod(_mod_);

        setSignexpression(_signexpression_);

    }
    public Object clone()
    {
        return new AModuloMultiplication(
            (PMultiplication) cloneNode(_multiplication_),
            (TMod) cloneNode(_mod_),
            (PSignexpression) cloneNode(_signexpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuloMultiplication(this);
    }

    public PMultiplication getMultiplication()
    {
        return _multiplication_;
    }

    public void setMultiplication(PMultiplication node)
    {
        if(_multiplication_ != null)
        {
            _multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiplication_ = node;
    }

    public TMod getMod()
    {
        return _mod_;
    }

    public void setMod(TMod node)
    {
        if(_mod_ != null)
        {
            _mod_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mod_ = node;
    }

    public PSignexpression getSignexpression()
    {
        return _signexpression_;
    }

    public void setSignexpression(PSignexpression node)
    {
        if(_signexpression_ != null)
        {
            _signexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _signexpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_multiplication_)
            + toString(_mod_)
            + toString(_signexpression_);
    }

    void removeChild(Node child)
    {
        if(_multiplication_ == child)
        {
            _multiplication_ = null;
            return;
        }

        if(_mod_ == child)
        {
            _mod_ = null;
            return;
        }

        if(_signexpression_ == child)
        {
            _signexpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_multiplication_ == oldChild)
        {
            setMultiplication((PMultiplication) newChild);
            return;
        }

        if(_mod_ == oldChild)
        {
            setMod((TMod) newChild);
            return;
        }

        if(_signexpression_ == oldChild)
        {
            setSignexpression((PSignexpression) newChild);
            return;
        }

    }
}
