/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class ASimpleList extends PSimpleList
{
    private PSimple _simple_;
    private final LinkedList _commaSimple_ = new TypedLinkedList(new CommaSimple_Cast());

    public ASimpleList()
    {
    }

    public ASimpleList(
        PSimple _simple_,
        List _commaSimple_)
    {
        setSimple(_simple_);

        {
            this._commaSimple_.clear();
            this._commaSimple_.addAll(_commaSimple_);
        }

    }
    public Object clone()
    {
        return new ASimpleList(
            (PSimple) cloneNode(_simple_),
            cloneList(_commaSimple_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleList(this);
    }

    public PSimple getSimple()
    {
        return _simple_;
    }

    public void setSimple(PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simple_ = node;
    }

    public LinkedList getCommaSimple()
    {
        return _commaSimple_;
    }

    public void setCommaSimple(List list)
    {
        _commaSimple_.clear();
        _commaSimple_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_simple_)
            + toString(_commaSimple_);
    }

    void removeChild(Node child)
    {
        if(_simple_ == child)
        {
            _simple_ = null;
            return;
        }

        if(_commaSimple_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_simple_ == oldChild)
        {
            setSimple((PSimple) newChild);
            return;
        }

        for(ListIterator i = _commaSimple_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class CommaSimple_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaSimple node = (PCommaSimple) o;

            if((node.parent() != null) &&
                (node.parent() != ASimpleList.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASimpleList.this))
            {
                node.parent(ASimpleList.this);
            }

            return node;
        }
    }
}
