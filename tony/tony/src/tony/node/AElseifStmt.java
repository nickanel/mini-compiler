/* This file was generated by SableCC (http://www.sablecc.org/). */

package tony.node;

import java.util.*;
import tony.analysis.*;

public final class AElseifStmt extends PElseifStmt
{
    private TElsif _elsif_;
    private PExpr _expr_;
    private TColon _colon_;
    private final LinkedList _stmt_ = new TypedLinkedList(new Stmt_Cast());

    public AElseifStmt()
    {
    }

    public AElseifStmt(
        TElsif _elsif_,
        PExpr _expr_,
        TColon _colon_,
        List _stmt_)
    {
        setElsif(_elsif_);

        setExpr(_expr_);

        setColon(_colon_);

        {
            this._stmt_.clear();
            this._stmt_.addAll(_stmt_);
        }

    }
    public Object clone()
    {
        return new AElseifStmt(
            (TElsif) cloneNode(_elsif_),
            (PExpr) cloneNode(_expr_),
            (TColon) cloneNode(_colon_),
            cloneList(_stmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseifStmt(this);
    }

    public TElsif getElsif()
    {
        return _elsif_;
    }

    public void setElsif(TElsif node)
    {
        if(_elsif_ != null)
        {
            _elsif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _elsif_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public LinkedList getStmt()
    {
        return _stmt_;
    }

    public void setStmt(List list)
    {
        _stmt_.clear();
        _stmt_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_elsif_)
            + toString(_expr_)
            + toString(_colon_)
            + toString(_stmt_);
    }

    void removeChild(Node child)
    {
        if(_elsif_ == child)
        {
            _elsif_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_stmt_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_elsif_ == oldChild)
        {
            setElsif((TElsif) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        for(ListIterator i = _stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Stmt_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.parent() != null) &&
                (node.parent() != AElseifStmt.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AElseifStmt.this))
            {
                node.parent(AElseifStmt.this);
            }

            return node;
        }
    }
}
